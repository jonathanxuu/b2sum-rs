{"config":{"output_file":null,"full_docs":false,"pub_only":false,"reachable_only":false,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs","program":"/Users/xuyizheng/.rustup/toolchains/nightly-aarch64-apple-darwin/bin/rls","arguments":[],"output":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/target/rls/debug/deps/libb2sum_rs-f20b47469d5c2ad0.rmeta"},"prelude":{"crate_id":{"name":"b2sum_rs","disambiguator":[7697502799988662940,0]},"crate_root":"src","external_crates":[{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17130627230582904889,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5231689799850066461,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8652275954070160698,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17296295565214172833,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15864945095995726160,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13292461249116594054,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3901778901778831666,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12353566860553344528,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[11600184695316902414,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[17548717704739513998,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5770613900481342471,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[108715184366751813,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15913530029563490062,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[18090564026707033871,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[2961899791017803033,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[10504668032746933824,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[10162253196309555193,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":18,"id":{"name":"blake2_rfc","disambiguator":[5440310595900470877,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":19,"id":{"name":"arrayvec","disambiguator":[15268178217126803141,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":20,"id":{"name":"nodrop","disambiguator":[4445887638460378883,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":21,"id":{"name":"constant_time_eq","disambiguator":[3057251935906741466,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":22,"id":{"name":"test","disambiguator":[2520054062790186326,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":23,"id":{"name":"getopts","disambiguator":[11280651397900347308,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":24,"id":{"name":"rustc_std_workspace_std","disambiguator":[3775172092146575639,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":25,"id":{"name":"unicode_width","disambiguator":[137847997667462805,0]}},{"file_name":"/Users/xuyizheng/Desktop/Desk/teeest/b2sum-rs/src/lib.rs","num":26,"id":{"name":"hex","disambiguator":[7135658544932485745,0]}}],"span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":4514,"line_start":1,"line_end":109,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":18,"index":378},"span":{"file_name":"src/lib.rs","byte_start":25,"byte_end":32,"line_start":1,"line_end":1,"column_start":26,"column_end":33},"alias_span":null,"name":"Blake2b","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":4514,"line_start":1,"line_end":109,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":6},{"krate":0,"index":17}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13},"span":{"file_name":"src/lib.rs","byte_start":1401,"byte_end":1411,"line_start":41,"line_end":41,"column_start":12,"column_end":22},"name":"Blake2bSum","qualname":"::Blake2bSum","value":"Blake2bSum { digest_size }","parent":null,"children":[{"krate":0,"index":14}],"decl_id":null,"docs":" ## Blake2b File Hash Constructor\n \n This is the official constructor used to call the new() function with the parameter of the intended digest size.\n \n ## Example\n \n ```no_run\n use b2sum_rust::Blake2bSum;\n \n fn main() {\n     // Creates a new File Instance\n     let context = Blake2bSum::new(64);\n     \n     // Outputs a Hexadecimal String\n     let hash = context.read(\"example_file.txt\");\n \n     // Converts the hexadecimal string to a vector of bytes\n     let bytes = Blake2bSum::as_bytes(&hash);\n \n     // Prints The Hexadecimal Representation\n     println!(\"Hash: {}\",hash);\n \n     // Asserts That These Are Equal\n     assert_eq!(hash,\"33B20D15383F97EB46D4FA69442596170CCA01008963A7D0E47210C33AEEF991C78323850C012550C227954A40B3D7AD612568ABC73DB9233FAB9EA4F002B0CB\");\n }\n \n ```\n \n All outputs are in **UPPER Hexadecimal** and between 1 and 64 bytes.\n","sig":null,"attributes":[{"value":"/ ## Blake2b File Hash Constructor","span":{"file_name":"src/lib.rs","byte_start":432,"byte_end":468,"line_start":11,"line_end":11,"column_start":1,"column_end":37}},{"value":"/ ","span":{"file_name":"src/lib.rs","byte_start":469,"byte_end":473,"line_start":12,"line_end":12,"column_start":1,"column_end":5}},{"value":"/ This is the official constructor used to call the new() function with the parameter of the intended digest size.","span":{"file_name":"src/lib.rs","byte_start":474,"byte_end":590,"line_start":13,"line_end":13,"column_start":1,"column_end":117}},{"value":"/ ","span":{"file_name":"src/lib.rs","byte_start":591,"byte_end":595,"line_start":14,"line_end":14,"column_start":1,"column_end":5}},{"value":"/ ## Example","span":{"file_name":"src/lib.rs","byte_start":596,"byte_end":610,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/ ","span":{"file_name":"src/lib.rs","byte_start":611,"byte_end":615,"line_start":16,"line_end":16,"column_start":1,"column_end":5}},{"value":"/ ```no_run","span":{"file_name":"src/lib.rs","byte_start":616,"byte_end":629,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/ use b2sum_rust::Blake2bSum;","span":{"file_name":"src/lib.rs","byte_start":630,"byte_end":661,"line_start":18,"line_end":18,"column_start":1,"column_end":32}},{"value":"/ ","span":{"file_name":"src/lib.rs","byte_start":662,"byte_end":666,"line_start":19,"line_end":19,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"src/lib.rs","byte_start":667,"byte_end":682,"line_start":20,"line_end":20,"column_start":1,"column_end":16}},{"value":"/     // Creates a new File Instance","span":{"file_name":"src/lib.rs","byte_start":683,"byte_end":721,"line_start":21,"line_end":21,"column_start":1,"column_end":39}},{"value":"/     let context = Blake2bSum::new(64);","span":{"file_name":"src/lib.rs","byte_start":722,"byte_end":764,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/     ","span":{"file_name":"src/lib.rs","byte_start":765,"byte_end":773,"line_start":23,"line_end":23,"column_start":1,"column_end":9}},{"value":"/     // Outputs a Hexadecimal String","span":{"file_name":"src/lib.rs","byte_start":774,"byte_end":813,"line_start":24,"line_end":24,"column_start":1,"column_end":40}},{"value":"/     let hash = context.read(\"example_file.txt\");","span":{"file_name":"src/lib.rs","byte_start":814,"byte_end":866,"line_start":25,"line_end":25,"column_start":1,"column_end":53}},{"value":"/ ","span":{"file_name":"src/lib.rs","byte_start":867,"byte_end":871,"line_start":26,"line_end":26,"column_start":1,"column_end":5}},{"value":"/     // Converts the hexadecimal string to a vector of bytes","span":{"file_name":"src/lib.rs","byte_start":872,"byte_end":935,"line_start":27,"line_end":27,"column_start":1,"column_end":64}},{"value":"/     let bytes = Blake2bSum::as_bytes(&hash);","span":{"file_name":"src/lib.rs","byte_start":936,"byte_end":984,"line_start":28,"line_end":28,"column_start":1,"column_end":49}},{"value":"/ ","span":{"file_name":"src/lib.rs","byte_start":985,"byte_end":989,"line_start":29,"line_end":29,"column_start":1,"column_end":5}},{"value":"/     // Prints The Hexadecimal Representation","span":{"file_name":"src/lib.rs","byte_start":990,"byte_end":1038,"line_start":30,"line_end":30,"column_start":1,"column_end":49}},{"value":"/     println!(\"Hash: {}\",hash);","span":{"file_name":"src/lib.rs","byte_start":1039,"byte_end":1073,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"/ ","span":{"file_name":"src/lib.rs","byte_start":1074,"byte_end":1078,"line_start":32,"line_end":32,"column_start":1,"column_end":5}},{"value":"/     // Asserts That These Are Equal","span":{"file_name":"src/lib.rs","byte_start":1079,"byte_end":1118,"line_start":33,"line_end":33,"column_start":1,"column_end":40}},{"value":"/     assert_eq!(hash,\"33B20D15383F97EB46D4FA69442596170CCA01008963A7D0E47210C33AEEF991C78323850C012550C227954A40B3D7AD612568ABC73DB9233FAB9EA4F002B0CB\");","span":{"file_name":"src/lib.rs","byte_start":1119,"byte_end":1275,"line_start":34,"line_end":34,"column_start":1,"column_end":157}},{"value":"/ }","span":{"file_name":"src/lib.rs","byte_start":1276,"byte_end":1281,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/ ","span":{"file_name":"src/lib.rs","byte_start":1282,"byte_end":1286,"line_start":36,"line_end":36,"column_start":1,"column_end":5}},{"value":"/ ```","span":{"file_name":"src/lib.rs","byte_start":1287,"byte_end":1294,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/ ","span":{"file_name":"src/lib.rs","byte_start":1295,"byte_end":1299,"line_start":38,"line_end":38,"column_start":1,"column_end":5}},{"value":"/ All outputs are in **UPPER Hexadecimal** and between 1 and 64 bytes.","span":{"file_name":"src/lib.rs","byte_start":1300,"byte_end":1372,"line_start":39,"line_end":39,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":14},"span":{"file_name":"src/lib.rs","byte_start":1418,"byte_end":1429,"line_start":42,"line_end":42,"column_start":5,"column_end":16},"name":"digest_size","qualname":"::Blake2bSum::digest_size","value":"usize","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":1073741831},"span":{"file_name":"src/lib.rs","byte_start":1474,"byte_end":1480,"line_start":46,"line_end":46,"column_start":16,"column_end":22},"name":"digest","qualname":"<Blake2bSum>::new::digest","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7},"span":{"file_name":"src/lib.rs","byte_start":1470,"byte_end":1473,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"new","qualname":"<Blake2bSum>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":1073741832},"span":{"file_name":"src/lib.rs","byte_start":3260,"byte_end":3264,"line_start":77,"line_end":77,"column_start":37,"column_end":41},"name":"self","qualname":"<Blake2bSum>::read_str::self","value":"&Blake2bSum","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":536870920},"span":{"file_name":"src/lib.rs","byte_start":3266,"byte_end":3272,"line_start":77,"line_end":77,"column_start":43,"column_end":49},"name":"string","qualname":"<Blake2bSum>::read_str::string","value":"T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":9},"span":{"file_name":"src/lib.rs","byte_start":3244,"byte_end":3245,"line_start":77,"line_end":77,"column_start":21,"column_end":22},"name":"T","qualname":"<Blake2bSum>::read_str::T$HirId { owner: DefId(0:8 ~ b2sum_rs[6ad3]::{impl#0}::read_str), local_id: 0 }","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8},"span":{"file_name":"src/lib.rs","byte_start":3235,"byte_end":3243,"line_start":77,"line_end":77,"column_start":12,"column_end":20},"name":"read_str","qualname":"<Blake2bSum>::read_str","value":"pub fn read_str<T: AsRef<str>>(&Self, T) -> String","parent":null,"children":[],"decl_id":null,"docs":" ## Hash File\n This is a function that hashes a file using **Blake2b** and returns the **Hexadecimal Representation** of it as a **String**. It takes as input any reference to Path.\n \n It should be noted that changes to the file during hashing, such as truncating the file may cause problems.\n \n ### About Filebuffer\n \n > Filebuffer can map files into memory. This is often faster than using the primitives in std::io, and also more convenient. Furthermore this crate offers prefetching and checking whether file data is resident in physical memory (so access will not incur a page fault). This enables non-blocking file reading.\n ## Hash File (Using Key)\n This is a function that hashes a file (using a key) with **Blake2b** and then returns the **Hexadecimal Representation** of it as a **String**. It takes as input any reference to Path.\n ## Hash File (using standard library)\n **Note: `read()` or `read_with_key()` should be used as opposed to this function.**\n \n This is a function that hashes a file using **Blake2b** and returns the **Hexadecimal Representation** of it as a **String**. It takes as input any reference to Path.\n \n This does not use `filebuffer` and instead uses the standard library. Filebuffer is much faster.\n # Read String\n This function will allow you to take a `String` or `str`, convert it to bytes, then hash it.\n","sig":null,"attributes":[{"value":"/ ## Hash File","span":{"file_name":"src/lib.rs","byte_start":1754,"byte_end":1770,"line_start":56,"line_end":56,"column_start":5,"column_end":21}},{"value":"/ This is a function that hashes a file using **Blake2b** and returns the **Hexadecimal Representation** of it as a **String**. It takes as input any reference to Path.","span":{"file_name":"src/lib.rs","byte_start":1775,"byte_end":1945,"line_start":57,"line_end":57,"column_start":5,"column_end":175}},{"value":"/ ","span":{"file_name":"src/lib.rs","byte_start":1950,"byte_end":1954,"line_start":58,"line_end":58,"column_start":5,"column_end":9}},{"value":"/ It should be noted that changes to the file during hashing, such as truncating the file may cause problems.","span":{"file_name":"src/lib.rs","byte_start":1959,"byte_end":2070,"line_start":59,"line_end":59,"column_start":5,"column_end":116}},{"value":"/ ","span":{"file_name":"src/lib.rs","byte_start":2075,"byte_end":2079,"line_start":60,"line_end":60,"column_start":5,"column_end":9}},{"value":"/ ### About Filebuffer","span":{"file_name":"src/lib.rs","byte_start":2084,"byte_end":2108,"line_start":61,"line_end":61,"column_start":5,"column_end":29}},{"value":"/ ","span":{"file_name":"src/lib.rs","byte_start":2113,"byte_end":2117,"line_start":62,"line_end":62,"column_start":5,"column_end":9}},{"value":"/ > Filebuffer can map files into memory. This is often faster than using the primitives in std::io, and also more convenient. Furthermore this crate offers prefetching and checking whether file data is resident in physical memory (so access will not incur a page fault). This enables non-blocking file reading.","span":{"file_name":"src/lib.rs","byte_start":2122,"byte_end":2435,"line_start":63,"line_end":63,"column_start":5,"column_end":318}},{"value":"/ ## Hash File (Using Key)","span":{"file_name":"src/lib.rs","byte_start":2441,"byte_end":2469,"line_start":65,"line_end":65,"column_start":5,"column_end":33}},{"value":"/ This is a function that hashes a file (using a key) with **Blake2b** and then returns the **Hexadecimal Representation** of it as a **String**. It takes as input any reference to Path.","span":{"file_name":"src/lib.rs","byte_start":2474,"byte_end":2662,"line_start":66,"line_end":66,"column_start":5,"column_end":193}},{"value":"/ ## Hash File (using standard library)","span":{"file_name":"src/lib.rs","byte_start":2668,"byte_end":2709,"line_start":68,"line_end":68,"column_start":5,"column_end":46}},{"value":"/ **Note: `read()` or `read_with_key()` should be used as opposed to this function.**","span":{"file_name":"src/lib.rs","byte_start":2714,"byte_end":2801,"line_start":69,"line_end":69,"column_start":5,"column_end":92}},{"value":"/ ","span":{"file_name":"src/lib.rs","byte_start":2806,"byte_end":2810,"line_start":70,"line_end":70,"column_start":5,"column_end":9}},{"value":"/ This is a function that hashes a file using **Blake2b** and returns the **Hexadecimal Representation** of it as a **String**. It takes as input any reference to Path.","span":{"file_name":"src/lib.rs","byte_start":2815,"byte_end":2985,"line_start":71,"line_end":71,"column_start":5,"column_end":175}},{"value":"/ ","span":{"file_name":"src/lib.rs","byte_start":2990,"byte_end":2994,"line_start":72,"line_end":72,"column_start":5,"column_end":9}},{"value":"/ This does not use `filebuffer` and instead uses the standard library. Filebuffer is much faster.","span":{"file_name":"src/lib.rs","byte_start":2999,"byte_end":3099,"line_start":73,"line_end":73,"column_start":5,"column_end":105}},{"value":"/ # Read String","span":{"file_name":"src/lib.rs","byte_start":3105,"byte_end":3122,"line_start":75,"line_end":75,"column_start":5,"column_end":22}},{"value":"/ This function will allow you to take a `String` or `str`, convert it to bytes, then hash it.","span":{"file_name":"src/lib.rs","byte_start":3127,"byte_end":3223,"line_start":76,"line_end":76,"column_start":5,"column_end":101}}]},{"kind":"Local","id":{"krate":0,"index":4026531848},"span":{"file_name":"src/lib.rs","byte_start":3371,"byte_end":3378,"line_start":80,"line_end":80,"column_start":17,"column_end":24},"name":"context","qualname":"context$HirId { owner: DefId(0:8 ~ b2sum_rs[6ad3]::{impl#0}::read_str), local_id: 15 }","value":"blake2_rfc::blake2b::Blake2b","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":2214592520},"span":{"file_name":"src/lib.rs","byte_start":3509,"byte_end":3513,"line_start":83,"line_end":83,"column_start":13,"column_end":17},"name":"hash","qualname":"hash$HirId { owner: DefId(0:8 ~ b2sum_rs[6ad3]::{impl#0}::read_str), local_id: 33 }","value":"blake2_rfc::blake2b::Blake2bResult","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":1073741834},"span":{"file_name":"src/lib.rs","byte_start":3743,"byte_end":3747,"line_start":89,"line_end":89,"column_start":24,"column_end":28},"name":"self","qualname":"<Blake2bSum>::read_bytes::self","value":"&Blake2bSum","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":536870922},"span":{"file_name":"src/lib.rs","byte_start":3749,"byte_end":3754,"line_start":89,"line_end":89,"column_start":30,"column_end":35},"name":"bytes","qualname":"<Blake2bSum>::read_bytes::bytes","value":"&[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":10},"span":{"file_name":"src/lib.rs","byte_start":3731,"byte_end":3741,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"read_bytes","qualname":"<Blake2bSum>::read_bytes","value":"pub fn read_bytes(&Self, &[u8]) -> String","parent":null,"children":[],"decl_id":null,"docs":" # Read Bytes\n This function will allow you to **read bytes** and then **hash the bytes** given the digest size.\n","sig":null,"attributes":[{"value":"/ # Read Bytes","span":{"file_name":"src/lib.rs","byte_start":3597,"byte_end":3613,"line_start":87,"line_end":87,"column_start":5,"column_end":21}},{"value":"/ This function will allow you to **read bytes** and then **hash the bytes** given the digest size.","span":{"file_name":"src/lib.rs","byte_start":3618,"byte_end":3719,"line_start":88,"line_end":88,"column_start":5,"column_end":106}}]},{"kind":"Local","id":{"krate":0,"index":4026531850},"span":{"file_name":"src/lib.rs","byte_start":3857,"byte_end":3864,"line_start":92,"line_end":92,"column_start":17,"column_end":24},"name":"context","qualname":"context$HirId { owner: DefId(0:10 ~ b2sum_rs[6ad3]::{impl#0}::read_bytes), local_id: 15 }","value":"blake2_rfc::blake2b::Blake2b","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":3087007754},"span":{"file_name":"src/lib.rs","byte_start":3942,"byte_end":3946,"line_start":94,"line_end":94,"column_start":13,"column_end":17},"name":"hash","qualname":"hash$HirId { owner: DefId(0:10 ~ b2sum_rs[6ad3]::{impl#0}::read_bytes), local_id: 29 }","value":"blake2_rfc::blake2b::Blake2bResult","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":1073741835},"span":{"file_name":"src/lib.rs","byte_start":4200,"byte_end":4201,"line_start":101,"line_end":101,"column_start":21,"column_end":22},"name":"s","qualname":"<Blake2bSum>::as_bytes::s","value":"&str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":11},"span":{"file_name":"src/lib.rs","byte_start":4191,"byte_end":4199,"line_start":101,"line_end":101,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Blake2bSum>::as_bytes","value":"pub fn as_bytes(&str) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" ## as_bytes()\n `as_bytes()` converts from a **Hexadecimal String** to a **Vector of Bytes**\n","sig":null,"attributes":[{"value":"/ ## as_bytes()","span":{"file_name":"src/lib.rs","byte_start":4077,"byte_end":4094,"line_start":99,"line_end":99,"column_start":5,"column_end":22}},{"value":"/ `as_bytes()` converts from a **Hexadecimal String** to a **Vector of Bytes**","span":{"file_name":"src/lib.rs","byte_start":4099,"byte_end":4179,"line_start":100,"line_end":100,"column_start":5,"column_end":85}}]},{"kind":"Local","id":{"krate":0,"index":1073741836},"span":{"file_name":"src/lib.rs","byte_start":4458,"byte_end":4462,"line_start":106,"line_end":106,"column_start":32,"column_end":36},"name":"self","qualname":"<Blake2bSum>::return_digest_size::self","value":"&Blake2bSum","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"src/lib.rs","byte_start":4438,"byte_end":4456,"line_start":106,"line_end":106,"column_start":12,"column_end":30},"name":"return_digest_size","qualname":"<Blake2bSum>::return_digest_size","value":"pub fn return_digest_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" ## Return Digest Size\n This method will return the provided digest size that the struct contains. It should be between 1 and 64 of type `usize`.\n","sig":null,"attributes":[{"value":"/ ## Return Digest Size","span":{"file_name":"src/lib.rs","byte_start":4271,"byte_end":4296,"line_start":104,"line_end":104,"column_start":5,"column_end":30}},{"value":"/ This method will return the provided digest size that the struct contains. It should be between 1 and 64 of type `usize`.","span":{"file_name":"src/lib.rs","byte_start":4301,"byte_end":4426,"line_start":105,"line_end":105,"column_start":5,"column_end":130}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"src/lib.rs","byte_start":1446,"byte_end":1456,"line_start":45,"line_end":45,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"src/lib.rs","byte_start":4,"byte_end":14,"line_start":1,"line_end":1,"column_start":5,"column_end":15},"ref_id":{"krate":18,"index":0}},{"kind":"Mod","span":{"file_name":"src/lib.rs","byte_start":16,"byte_end":23,"line_start":1,"line_end":1,"column_start":17,"column_end":24},"ref_id":{"krate":18,"index":131}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":1418,"byte_end":1429,"line_start":42,"line_end":42,"column_start":5,"column_end":16},"ref_id":{"krate":0,"index":14}},{"kind":"Type","span":{"file_name":"src/lib.rs","byte_start":1446,"byte_end":1456,"line_start":45,"line_end":45,"column_start":6,"column_end":16},"ref_id":{"krate":0,"index":13}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":1510,"byte_end":1516,"line_start":47,"line_end":47,"column_start":12,"column_end":18},"ref_id":{"krate":0,"index":1073741831}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":1524,"byte_end":1530,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"ref_id":{"krate":0,"index":1073741831}},{"kind":"Type","span":{"file_name":"src/lib.rs","byte_start":1558,"byte_end":1568,"line_start":48,"line_end":48,"column_start":20,"column_end":30},"ref_id":{"krate":0,"index":13}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":1587,"byte_end":1598,"line_start":49,"line_end":49,"column_start":17,"column_end":28},"ref_id":{"krate":0,"index":14}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":1600,"byte_end":1606,"line_start":49,"line_end":49,"column_start":30,"column_end":36},"ref_id":{"krate":0,"index":1073741831}},{"kind":"Type","span":{"file_name":"src/lib.rs","byte_start":3247,"byte_end":3252,"line_start":77,"line_end":77,"column_start":24,"column_end":29},"ref_id":{"krate":2,"index":2913}},{"kind":"Type","span":{"file_name":"src/lib.rs","byte_start":3274,"byte_end":3275,"line_start":77,"line_end":77,"column_start":51,"column_end":52},"ref_id":{"krate":0,"index":9}},{"kind":"Type","span":{"file_name":"src/lib.rs","byte_start":3280,"byte_end":3286,"line_start":77,"line_end":77,"column_start":57,"column_end":63},"ref_id":{"krate":5,"index":7606}},{"kind":"Function","span":{"file_name":"src/lib.rs","byte_start":3390,"byte_end":3393,"line_start":80,"line_end":80,"column_start":36,"column_end":39},"ref_id":{"krate":18,"index":341}},{"kind":"Type","span":{"file_name":"src/lib.rs","byte_start":3381,"byte_end":3388,"line_start":80,"line_end":80,"column_start":27,"column_end":34},"ref_id":{"krate":18,"index":378}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":3394,"byte_end":3398,"line_start":80,"line_end":80,"column_start":40,"column_end":44},"ref_id":{"krate":0,"index":1073741832}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":3399,"byte_end":3410,"line_start":80,"line_end":80,"column_start":45,"column_end":56},"ref_id":{"krate":0,"index":14}},{"kind":"Function","span":{"file_name":"src/lib.rs","byte_start":3461,"byte_end":3467,"line_start":82,"line_end":82,"column_start":17,"column_end":23},"ref_id":{"krate":18,"index":347}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":3453,"byte_end":3460,"line_start":82,"line_end":82,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":4026531848}},{"kind":"Function","span":{"file_name":"src/lib.rs","byte_start":3484,"byte_end":3492,"line_start":82,"line_end":82,"column_start":40,"column_end":48},"ref_id":{"krate":2,"index":12376}},{"kind":"Function","span":{"file_name":"src/lib.rs","byte_start":3475,"byte_end":3481,"line_start":82,"line_end":82,"column_start":31,"column_end":37},"ref_id":{"krate":2,"index":2915}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":3468,"byte_end":3474,"line_start":82,"line_end":82,"column_start":24,"column_end":30},"ref_id":{"krate":0,"index":536870920}},{"kind":"Function","span":{"file_name":"src/lib.rs","byte_start":3524,"byte_end":3532,"line_start":83,"line_end":83,"column_start":28,"column_end":36},"ref_id":{"krate":18,"index":348}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":3516,"byte_end":3523,"line_start":83,"line_end":83,"column_start":20,"column_end":27},"ref_id":{"krate":0,"index":4026531848}},{"kind":"Function","span":{"file_name":"src/lib.rs","byte_start":3557,"byte_end":3569,"line_start":85,"line_end":85,"column_start":21,"column_end":33},"ref_id":{"krate":26,"index":74}},{"kind":"Mod","span":{"file_name":"src/lib.rs","byte_start":3552,"byte_end":3555,"line_start":85,"line_end":85,"column_start":16,"column_end":19},"ref_id":{"krate":26,"index":0}},{"kind":"Function","span":{"file_name":"src/lib.rs","byte_start":3575,"byte_end":3583,"line_start":85,"line_end":85,"column_start":39,"column_end":47},"ref_id":{"krate":18,"index":326}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":3570,"byte_end":3574,"line_start":85,"line_end":85,"column_start":34,"column_end":38},"ref_id":{"krate":0,"index":2214592520}},{"kind":"Type","span":{"file_name":"src/lib.rs","byte_start":3766,"byte_end":3772,"line_start":89,"line_end":89,"column_start":47,"column_end":53},"ref_id":{"krate":5,"index":7606}},{"kind":"Function","span":{"file_name":"src/lib.rs","byte_start":3876,"byte_end":3879,"line_start":92,"line_end":92,"column_start":36,"column_end":39},"ref_id":{"krate":18,"index":341}},{"kind":"Type","span":{"file_name":"src/lib.rs","byte_start":3867,"byte_end":3874,"line_start":92,"line_end":92,"column_start":27,"column_end":34},"ref_id":{"krate":18,"index":378}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":3880,"byte_end":3884,"line_start":92,"line_end":92,"column_start":40,"column_end":44},"ref_id":{"krate":0,"index":1073741834}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":3885,"byte_end":3896,"line_start":92,"line_end":92,"column_start":45,"column_end":56},"ref_id":{"krate":0,"index":14}},{"kind":"Function","span":{"file_name":"src/lib.rs","byte_start":3915,"byte_end":3921,"line_start":93,"line_end":93,"column_start":17,"column_end":23},"ref_id":{"krate":18,"index":347}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":3907,"byte_end":3914,"line_start":93,"line_end":93,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":4026531850}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":3922,"byte_end":3927,"line_start":93,"line_end":93,"column_start":24,"column_end":29},"ref_id":{"krate":0,"index":536870922}},{"kind":"Function","span":{"file_name":"src/lib.rs","byte_start":3957,"byte_end":3965,"line_start":94,"line_end":94,"column_start":28,"column_end":36},"ref_id":{"krate":18,"index":348}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":3949,"byte_end":3956,"line_start":94,"line_end":94,"column_start":20,"column_end":27},"ref_id":{"krate":0,"index":4026531850}},{"kind":"Function","span":{"file_name":"src/lib.rs","byte_start":4037,"byte_end":4049,"line_start":97,"line_end":97,"column_start":21,"column_end":33},"ref_id":{"krate":26,"index":74}},{"kind":"Mod","span":{"file_name":"src/lib.rs","byte_start":4032,"byte_end":4035,"line_start":97,"line_end":97,"column_start":16,"column_end":19},"ref_id":{"krate":26,"index":0}},{"kind":"Function","span":{"file_name":"src/lib.rs","byte_start":4055,"byte_end":4063,"line_start":97,"line_end":97,"column_start":39,"column_end":47},"ref_id":{"krate":18,"index":326}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":4050,"byte_end":4054,"line_start":97,"line_end":97,"column_start":34,"column_end":38},"ref_id":{"krate":0,"index":3087007754}},{"kind":"Type","span":{"file_name":"src/lib.rs","byte_start":4212,"byte_end":4215,"line_start":101,"line_end":101,"column_start":33,"column_end":36},"ref_id":{"krate":5,"index":7063}},{"kind":"Function","span":{"file_name":"src/lib.rs","byte_start":4252,"byte_end":4258,"line_start":102,"line_end":102,"column_start":31,"column_end":37},"ref_id":{"krate":2,"index":8725}},{"kind":"Function","span":{"file_name":"src/lib.rs","byte_start":4242,"byte_end":4248,"line_start":102,"line_end":102,"column_start":21,"column_end":27},"ref_id":{"krate":26,"index":76}},{"kind":"Mod","span":{"file_name":"src/lib.rs","byte_start":4237,"byte_end":4240,"line_start":102,"line_end":102,"column_start":16,"column_end":19},"ref_id":{"krate":26,"index":0}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":4249,"byte_end":4250,"line_start":102,"line_end":102,"column_start":28,"column_end":29},"ref_id":{"krate":0,"index":1073741835}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":4490,"byte_end":4494,"line_start":107,"line_end":107,"column_start":16,"column_end":20},"ref_id":{"krate":0,"index":1073741836}},{"kind":"Variable","span":{"file_name":"src/lib.rs","byte_start":4495,"byte_end":4506,"line_start":107,"line_end":107,"column_start":21,"column_end":32},"ref_id":{"krate":0,"index":14}}],"macro_refs":[],"relations":[{"span":{"file_name":"src/lib.rs","byte_start":1446,"byte_end":1456,"line_start":45,"line_end":45,"column_start":6,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":13},"to":{"krate":4294967295,"index":4294967295}}]}